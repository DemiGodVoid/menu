import requests
from bs4 import BeautifulSoup

def check_headers(headers):
    required_headers = [
        'X-Content-Type-Options',
        'X-Frame-Options',
        'X-XSS-Protection',
        'Content-Security-Policy',
        'Referrer-Policy',
        'Permissions-Policy'
    ]

    print("\nChecking HTTP Headers:")
    missing_headers = [header for header in required_headers if header not in headers]
    if missing_headers:
        for header in missing_headers:
            print(f"Missing header: {header}")
    else:
        print("All critical security headers are present.")

def sql_injection_test(url):
    test_payloads = [
        "' OR '1'='1",
        "' OR 1=1 --",
        "' UNION SELECT NULL, NULL, NULL --",
        "' AND 1=CONVERT(int, @@version) --"
    ]

    for payload in test_payloads:
        test_url = f"{url}?search={payload}"
        try:
            response = requests.get(test_url)
            if "error" in response.text.lower() or "syntax" in response.text.lower():
                print(f"Potential SQL Injection vulnerability detected with payload: {payload}")
        except requests.RequestException as e:
            print(f"Error testing SQL injection: {e}")

def xss_test(url):
    xss_payloads = [
        "<script>alert('XSS')</script>",
        "<img src='x' onerror='alert(1)'>",
        "'<svg/onload=alert(1)>"
    ]
    inputs = [("search", payload) for payload in xss_payloads]

    for input_name, payload in inputs:
        test_url = f"{url}?{input_name}={payload}"
        try:
            response = requests.get(test_url)
            if payload in response.text:
                print(f"Potential XSS vulnerability detected with payload: {payload}")
        except requests.RequestException as e:
            print(f"Error testing XSS: {e}")

def find_vulnerabilities(url):
    try:
        response = requests.get(url)
        response.raise_for_status()  # Check if the request was successful
    except requests.RequestException as e:
        print(f"Error fetching {url}: {e}")
        return

    soup = BeautifulSoup(response.text, 'html.parser')

    # Check HTTP Headers
    check_headers(response.headers)

    # Perform SQL Injection Testing
    sql_injection_test(url)

    # Perform XSS Testing
    xss_test(url)

    # Find all input fields, textareas, selects, and forms
    inputs = soup.find_all('input')
    textareas = soup.find_all('textarea')
    selects = soup.find_all('select')
    forms = soup.find_all('form')

    vulnerable_inputs = []
    vulnerable_textareas = []

    print(f"\nFound {len(inputs)} input fields:")
    for input_tag in inputs:
        input_type = input_tag.get('type', 'text')
        name = input_tag.get('name', 'Unnamed')
        required = input_tag.get('required')
        pattern = input_tag.get('pattern')
        print(f"\nInput field - Type: {input_type}, Name: {name}")
        print(f"HTML Code: {input_tag.prettify()}")

        if not name:
            vulnerable_inputs.append(f"Unnamed input field - Type: {input_type}\nHTML Code: {input_tag.prettify()}")
        if not required and input_type in ['text', 'password', 'email', 'number']:
            vulnerable_inputs.append(f"Potentially vulnerable input field (no 'required' attribute): {name}\nHTML Code: {input_tag.prettify()}")
        if not pattern and input_type in ['text', 'email']:
            vulnerable_inputs.append(f"Potentially vulnerable input field (no 'pattern' attribute): {name}\nHTML Code: {input_tag.prettify()}")

    print(f"\nFound {len(textareas)} textarea fields:")
    for textarea_tag in textareas:
        name = textarea_tag.get('name', 'Unnamed')
        print(f"\nTextarea field - Name: {name}")
        print(f"HTML Code: {textarea_tag.prettify()}")

        if not name:
            vulnerable_textareas.append(f"Unnamed textarea field\nHTML Code: {textarea_tag.prettify()}")

    print(f"\nFound {len(selects)} select fields:")
    for select_tag in selects:
        name = select_tag.get('name', 'Unnamed')
        options = [option.get_text(strip=True) for option in select_tag.find_all('option')]
        print(f"\nSelect field - Name: {name}, Options: {', '.join(options)}")
        print(f"HTML Code: {select_tag.prettify()}")

    print(f"\nFound {len(forms)} forms:")
    for form_tag in forms:
        action = form_tag.get('action', 'None')
        method = form_tag.get('method', 'get')
        print(f"\nForm - Action: {action}, Method: {method}")
        print(f"HTML Code: {form_tag.prettify()}")

        # Check for potential vulnerabilities in forms
        if method.lower() not in ['get', 'post']:
            print(f"Warning: Form uses unusual method '{method}'")
        if action.startswith('/') or not action.startswith('http'):
            print(f"Warning: Form action is relative or missing: {action}")

    # Print potentially vulnerable fields
    if vulnerable_inputs:
        print("\nPotentially Vulnerable Input Fields:")
        for field in vulnerable_inputs:
            print(field)
    else:
        print("\nNo potentially vulnerable input fields found.")

    if vulnerable_textareas:
        print("\nPotentially Vulnerable Textarea Fields:")
        for field in vulnerable_textareas:
            print(field)
    else:
        print("\nNo potentially vulnerable textarea fields found.")

if __name__ == "__main__":
    url = input("Enter the URL of the site to scrape: ")
    find_vulnerabilities(url)
